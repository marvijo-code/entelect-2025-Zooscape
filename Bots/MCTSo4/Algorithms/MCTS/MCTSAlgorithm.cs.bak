using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using MCTSo4.Enums;
using MCTSo4.Models;
using Serilog;

namespace MCTSo4.Algorithms.MCTS
{
    /// <summary>
    /// Monte Carlo Tree Search implementation.
    /// </summary>
    public static class MctsAlgorithm
    {
        private static readonly Random Rnd = new Random();
        private static readonly ILogger AlgoLog = Log.ForContext(typeof(MctsAlgorithm));

        public static Move FindBestMove(
            MCTSGameState rootMctsState,
            Guid botId,
            BotParameters parameters,
            Stopwatch stopwatch
        )
        {
            if (botId == Guid.Empty)
            {
                AlgoLog.Error(
                    "FindBestMove called with Guid.Empty BotId. MCTS cannot proceed. Returning a random move."
                );
                var legalMoves = rootMctsState.GetLegalMoves();
                return legalMoves.Any() ? legalMoves[Rnd.Next(legalMoves.Count)] : Move.Up; // Default to Up if no legal moves somehow
            }

            AlgoLog.Debug(
                "FindBestMove called for BotId: {BotId}. MctsIterations: {Iterations}, MctsDepth: {Depth}, Exploration: {Exploration}",
                botId,
                parameters.MctsIterations,
                parameters.MctsDepth,
                parameters.ExplorationConstant
            );
            var root = new MctsNode(
                rootMctsState.Clone(),
                null,
                null,
                parameters.ExplorationConstant,
                botId,
                parameters
            );

            for (int i = 0; i < parameters.MctsIterations; i++)
            {
                if (stopwatch.ElapsedMilliseconds >= 140)
                {
                    AlgoLog.Warning(
                        "MCTS terminating iteration {Iteration} for BotId {BotId} early due to time limit ({ElapsedMs}ms >= 140ms)",
                        i + 1,
                        botId,
                        stopwatch.ElapsedMilliseconds
                    );
                    break;
                }
                AlgoLog.Verbose(
                    "MCTS Iteration {Iteration}/{TotalIterations} for BotId {BotId} starting...",
                    i + 1,
                    parameters.MctsIterations,
                    botId
                );

                var nodeToSimulateFrom = root;
                int selectionTreeDepth = 0;

                AlgoLog.Verbose("Starting Selection phase for BotId {BotId}...", botId);
                while (
                    !nodeToSimulateFrom.IsTerminal(0, int.MaxValue)
                    && nodeToSimulateFrom.IsFullyExpanded
                )
                {
                    nodeToSimulateFrom = nodeToSimulateFrom.BestChild();
                    AlgoLog.Verbose(
                        "Selected node: {NodeAction}, Visits: {Visits}, Wins: {Wins} for BotId {BotId}",
                        nodeToSimulateFrom.Move,
                        nodeToSimulateFrom.Visits,
                        nodeToSimulateFrom.Wins,
                        botId
                    );
                    selectionTreeDepth++;
                }
                AlgoLog.Verbose(
                    "Selection phase complete for BotId {BotId}. Selected node leads with action: {Action}",
                    botId,
                    nodeToSimulateFrom.Move
                );

                AlgoLog.Verbose("Starting Expansion phase for BotId {BotId}...", botId);
                MctsNode expandedNodeForRollout = nodeToSimulateFrom;
                if (
                    !nodeToSimulateFrom.IsTerminal(0, int.MaxValue)
                    && nodeToSimulateFrom.UntriedActions.Any()
                )
                {
                    AlgoLog.Debug(
                        "Expansion criteria met for BotId {BotId}. Expanding node.",
                        botId
                    );
                    var actionIndex = Rnd.Next(nodeToSimulateFrom.UntriedActions.Count);
                    var actionToExpand = nodeToSimulateFrom.UntriedActions[actionIndex];
                    nodeToSimulateFrom.UntriedActions.RemoveAt(actionIndex);
                    var nextMctsState = nodeToSimulateFrom.State.Apply(actionToExpand, botId);
                    var child = new MctsNode(
                        nextMctsState,
                        nodeToSimulateFrom,
                        actionToExpand,
                        parameters.ExplorationConstant,
                        botId,
                        parameters
                    );
                    nodeToSimulateFrom.Children.Add(child);
                    expandedNodeForRollout = child;
                    AlgoLog.Verbose(
                        "Expanded with action: {Action} for BotId {BotId}. New node created.",
                        actionToExpand,
                        botId
                    );
                }
                else
                {
                    AlgoLog.Verbose(
                        "Expansion phase for BotId {BotId}: Node is terminal or no untried actions. Current node action: {Action}",
                        botId,
                        nodeToSimulateFrom.Move
                    );
                }
                AlgoLog.Verbose("Expansion phase complete for BotId {BotId}.", botId);

                AlgoLog.Verbose(
                    "Starting Simulation (Rollout) with FastGameState from node with action: {Action} for BotId {BotId}...",
                    expandedNodeForRollout.Move,
                    botId
                );
                FastGameState fastRolloutState = new FastGameState();
                fastRolloutState.InitializeFromMCTSGameState(expandedNodeForRollout.State, botId);

                int rolloutStepCount = 0;
                for (
                    rolloutStepCount = 0;
                    rolloutStepCount < parameters.MctsDepth;
                    rolloutStepCount++
                )
                {
                    if (
                        fastRolloutState.IsTerminalFast(
                            rolloutStepCount,
                            parameters.MctsDepth,
                            parameters
                        )
                    )
                    {
                        AlgoLog.Verbose(
                            "FastRollout for BotId {BotId} reached terminal at step {Step}",
                            botId,
                            rolloutStepCount
                        );
                        break;
                    }

                    var legalMoves = fastRolloutState.GetLegalMovesFast();
                    if (
                        !legalMoves.Any()
                        || (legalMoves.Count == 1 && legalMoves.Contains(Move.Stay))
                    )
                    {
                        AlgoLog.Verbose(
                            "FastRollout for BotId {BotId}: No valid moves other than potentially Stay. Breaking.",
                            botId
                        );
                        break;
                    }
                    var selectableMoves = legalMoves.Where(m => m != Move.Stay).ToList();
                    if (!selectableMoves.Any() && legalMoves.Contains(Move.Stay))
                    {
                        selectableMoves.Add(Move.Stay);
                    }
                    else if (!selectableMoves.Any())
                    {
                        AlgoLog.Warning(
                            "FastRollout for BotId {BotId}: No selectable moves found. Breaking.",
                            botId
                        );
                        break;
                    }

                    var randomAction = selectableMoves[Rnd.Next(selectableMoves.Count)];
                    fastRolloutState = fastRolloutState.ApplyFast(randomAction);
                }

                if (
                    rolloutStepCount == parameters.MctsDepth
                    && !fastRolloutState.IsTerminalFast(
                        rolloutStepCount,
                        parameters.MctsDepth,
                        parameters
                    )
                )
                {
                    AlgoLog.Verbose(
                        "FastRollout for BotId {BotId} reached max depth {MaxDepth}.",
                        botId,
                        parameters.MctsDepth
                    );
                }

                var reward = fastRolloutState.EvaluateFast(parameters);
                AlgoLog.Debug(
                    "FastSimulation (Rollout) for BotId {BotId} complete. Steps: {Steps}, Reward: {Reward}, Terminal: {IsTerminalNow}",
                    botId,
                    rolloutStepCount,
                    reward,
                    fastRolloutState.IsTerminalFast(
                        rolloutStepCount,
                        parameters.MctsDepth,
                        parameters
                    )
                );

                AlgoLog.Verbose("Starting Backpropagation phase for BotId {BotId}...", botId);
                var tempNode = expandedNodeForRollout;
                while (tempNode != null)
                {
                    tempNode.Visits++;
                    tempNode.Wins += reward;
                    AlgoLog.Verbose(
                        "Backpropagated to node: {NodeAction}, NewVisits: {Visits}, NewWins: {Wins} for BotId {BotId}",
                        tempNode.Move,
                        tempNode.Visits,
                        tempNode.Wins,
                        botId
                    );
                    tempNode = tempNode.Parent;
                }
                AlgoLog.Verbose("Backpropagation phase complete for BotId {BotId}.", botId);
                AlgoLog.Debug(
                    "MCTS Iteration {Iteration} for BotId {BotId} complete. Time elapsed: {ElapsedMs}ms",
                    i + 1,
                    botId,
                    stopwatch.ElapsedMilliseconds
                );
            }

            if (!root.Children.Any())
            {
                AlgoLog.Warning(
                    "MCTS for BotId {BotId}: Root node has no children. Untried: {Count}",
                    botId,
                    root.UntriedActions.Count
                );
                if (root.UntriedActions.Any())
                {
                    AlgoLog.Information(
                        "BotId {BotId}: Fallback to first untried from root.",
                        botId
                    );
                    return root.UntriedActions.First();
                }
                else if (rootMctsState.GetLegalMoves().Any())
                {
                    AlgoLog.Information(
                        "BotId {BotId}: Fallback to first legal from root state.",
                        botId
                    );
                    return rootMctsState.GetLegalMoves().First();
                }
                else
                {
                    AlgoLog.Error(
                        "BotId {BotId}: No children, untried, or legal. Default Up.",
                        botId
                    );
                    return Move.Up;
                }
            }

            var bestChild = root.Children.OrderByDescending(c => c.Visits).FirstOrDefault();
            AlgoLog.Debug(
                "FindBestMove for BotId {BotId} determined best child: {Move}, Visits: {V}, Wins: {W}",
                botId,
                bestChild?.Move,
                bestChild?.Visits,
                bestChild?.Wins
            );

            if (bestChild != null && bestChild.Move.HasValue)
            {
                return bestChild.Move.Value;
            }
            var legalRootMoves = rootMctsState.GetLegalMoves();
            if (legalRootMoves.Any())
            {
                AlgoLog.Information(
                    "BotId {BotId}: No best child with move, fallback to root legal: {Move}",
                    botId,
                    legalRootMoves.First()
                );
                return legalRootMoves.First();
            }
            AlgoLog.Error("BotId {BotId}: No best child, no root legal. Default Up.", botId);
            return Move.Up;
        }
    }
}
